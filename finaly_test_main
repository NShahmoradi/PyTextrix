from operator import itemgetter
import json
import os
import re
from dependensyOfProject import (
    questions,
    TheEndAtTheBeginningError,
    ResponseRangeError1,
    ResponseRangeError2,
    ResponseRangeError3,
    ResponseRangeError4,
    ResponseRangeError5,
    ExitConditionError,
    NotFoundFileError,
    ResponseError,
)

def validate_yes_no(answer, error_cls):
    if answer not in 'YyNn':
        raise error_cls()
    return answer.lower()

def process_file(answer, ignored_chars):
    try:
        with open(answer, mode='r', encoding='utf-8') as file:
            result_txt = file.read()
        sentences = len([s for s in re.split(r'(?<=[.!?])\s+(?=[A-Z])', result_txt) if s.strip()])
        lines = len(result_txt.splitlines())

        for char in ignored_chars:
            result_txt = result_txt.replace(char, ' ')

        words = result_txt.split()
        total_words = len(words)
        avg_len = sum(len(word) for word in words) / total_words

        return result_txt, words, sentences, lines, total_words, avg_len
    except FileNotFoundError:
        raise NotFoundFileError()

def validate_number(answer, allow_negative=False):
    try:
        num = int(answer)
        if not allow_negative and num < 0:
            raise ResponseRangeError5()
        return num
    except ValueError:
        raise ResponseError()

def validate_ranges(min_range, max_range):
    if min_range < 0 or max_range < 0:
        raise ResponseRangeError5()
    if min_range > max_range:
        raise ResponseRangeError4()
    return range(min_range, max_range + 1)

def error_management_and_processes():
    ignored_chars = [".", ",", "’", "?", "!", ":", ";", "\"", "'", "-", "—", "(", ")", "[", "]", "...", "/", "{", "}", "<", ">", "|", "\\", "\n"]
    consecutive_counter = 1
    ignored_words_list = []
    all_words = []
    result_dict = {}

    try:
        # Question 0: Continue or Quit
        answer = input(questions[0])
        if answer.lower() in 'q':
            raise ExitConditionError()
        validate_yes_no(answer, TheEndAtTheBeginningError)

        # Question 1: File Path
        answer = input(questions[1])
        file_content, all_words, sentence_count, line_count, word_count, avg_word_len = process_file(answer, ignored_chars)

        # Question 2: Consecutive Words Counter
        answer = input(questions[2])
        if answer in 'nN' or int(answer) == 0:
            print("Skipping consecutive word counting!")
        else:
            consecutive_counter = validate_number(answer)
            for i in range(len(all_words) - (consecutive_counter - 1)):
                pattern = ' '.join(all_words[i:i + consecutive_counter])
                result_dict[pattern] = result_dict.get(pattern, 0) + 1

        # Question 3: Sorting
        answer = input(questions[3])
        if answer.lower() in 'ad':
            reverse = answer.lower() == 'a'
            result_dict = dict(sorted(result_dict.items(), key=itemgetter(1), reverse=reverse))

        # Question 4 & 5: Ignored Words
        answer = input(questions[4])
        if answer.lower() in 'y':
            ignored_file_path = input(questions[5])
            with open(ignored_file_path, 'r') as file:
                ignored_words_list = file.read().split()
            all_words = [word for word in all_words if word not in ignored_words_list]
            word_count = len(all_words)

        # Question 6 & 7: Word Length Ranges
        max_range = validate_number(input(questions[6]))
        min_range = validate_number(input(questions[7]))
        word_range = validate_ranges(min_range, max_range)
        final_words = [word for word in all_words if len(word) in word_range]

        # Final Processing
        longest_word = max(final_words, key=len, default='')
        longest_words = [word for word in final_words if len(word) == len(longest_word)]

        # Output Results
        output_path = input(questions[9])
        if not os.path.isdir(os.path.dirname(output_path)):
            raise NotFoundFileError()
        result = {
            "Sentence Count": sentence_count,
            "Line Count": line_count,
            "Word Count": word_count,
            "Ignored Words": ignored_words_list,
            "Average Word Length": avg_word_len,
            "Consecutive Words": result_dict,
            "Longest Word": longest_word,
            "All Longest Words": longest_words,
        }
        with open(output_path + '.json', 'w', encoding='utf-8') as file:
            json.dump(result, file, indent=3)
        print("✨ Processing complete!")
    except (ValueError, ExitConditionError, TheEndAtTheBeginningError, ResponseRangeError1, ResponseRangeError2, ResponseRangeError3, ResponseRangeError4, ResponseRangeError5, NotFoundFileError, ResponseError) as e:
        print(f"Error: {e}")

error_management_and_processes()
